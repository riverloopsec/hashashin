# Copyright 2019 River Loop Security LLC, All Rights Reserved
# Author Rylan O'Connell

import binaryninja as binja
from annotations import Annotations
from typing import Dict
from lsh import brittle_hash

# type aliases
Function = binja.function.Function
Basic_Block = binja.basicblock.BasicBlock
Binary_View = binja.binaryview.BinaryView


def tag_function(bv: Binary_View, function: Function, hash: str,  signatures: Dict[str, Annotations]) -> None:
    """
    Port tags for each basic block from signatures dictionary into current binary.

    :param bv: BinaryView that tags will be applied to
    :param function: function to tag
    :param hash: hash of function as generated by hashing.hash_function()
    :param signatures: dictionary mapping function hashes to Annotation objects
    """
    tag_types = {}

    annotations = signatures[hash]
    bb_hashes = {}
    for bb in function:
        bb_hashes[brittle_hash(bv, bb)] = bb

    for bb_hash in annotations.blocks():
        if bb_hash in bb_hashes:
            bb = bb_hashes[bb_hash]

        # keep a running list of tags so we don't have to create a new tag type each time
        tag_name = list(signatures[hash][bb_hash].keys())[0]
        tag_data = signatures[hash][bb_hash][tag_name]
        if tag_name == '':
            continue

        if tag_name not in tag_types:
            tag_types[tag_name] = bv.create_tag_type(tag_name, tag_name[0].capitalize())

        function.create_user_address_tag(bb.start, tag_types[tag_name], tag_data)


def read_tags(bv: Binary_View, hashes: Dict[str, Function]) -> Dict[str, Annotations]:
    """
    Gathers tag locations from every function in the binary.

    :param bv: BinaryView that contains the analysis results
    :param hashes: a dictionary mapping hashes to their functions
    :return: dictionary representing all tags in the current binary
    """
    tagged_dict = {}

    # TODO: switch to use GetAllTagReferences once it's available in the python API for O(1) access times
    for hash_value in hashes:
        function = hashes[hash_value]
        tagged_dict[hash_value] = Annotations(function=function, bv=bv)
    return tagged_dict
